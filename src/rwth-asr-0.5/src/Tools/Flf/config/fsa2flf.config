# Recognizer output FSAs to FLF lattices

[*]
lexicon-file				=
corpus-file				=
log-file				=

fsa-archive				=
flf-archive				=

pronunciation-scale			=
lm-scale				=


# ---------------------------------------------------------------------------
[*]
log-channel.file			= $(log-file)
error.channel				= log-channel, stderr
warning.channel				= log-channel, stderr
log.channel				= log-channel #, stdout
progress.channel      			= log-channel, stdout
statistics.channel			= log-channel
configuration.channel   		= log-channel
system-info.channel     		= log-channel
encoding				= utf-8
unbuffered				= true
ignore-unknown-parameters		= true
on-error				= immediate-exit


# ---------------------------------------------------------------------------
[*.lexicon]
file					= $(lexicon-file)
read-only				= true


# ---------------------------------------------------------------------------
[*.corpus]
file					= $(corpus-file)
warn-about-unexpected-elements		= no
capitalize-transcriptions		= no


# ---------------------------------------------------------------------------
[*.network]
initial-nodes				= speech-segment


[*.network.speech-segment]
type					= speech-segment
links					= 0->archive-reader:1 0->archive-writer:1


[*.network.archive-reader]
type					= archive-reader
links					= remove-pron-score-from-lm
format					= flf
path					= $(fsa-archive)
info					= false
[*.network.archive-reader.*.semiring]
type					= tropical
keys					= am lm
am.scale				= 1.0
lm.scale				= $(lm-scale)
[*.network.archive-reader.flf]
alphabet-name				= lemma-pronunciation
boundaries.suffix			= .binwb.gz
am.format				= bin
am.suffix				= .binfsa.gz
lm.format				= bin
lm.suffix				= -lm.binfsa.gz


[*.network.remove-pron-score-from-lm]
type					= extend-by-pronunciation-score
links					= add-pron-score-to-am
key					= lm
scale					= -$(pronunciation-scale)
rescore-mode				= in-place-cached


[*.network.add-pron-score-to-am]
type					= extend-by-pronunciation-score
links					= unscale-lm
key					= am
scale					= $(pronunciation-scale)
rescore-mode				= in-place-cached


[*.network.unscale-lm]
type					= multiply
links					= apply
key					= lm
scale					= $[1/$(lm-scale)]
rescore-mode				= in-place-cached


[*.network.apply]
type					= copy
links					= archive-writer


[*.network.archive-writer]
type					= archive-writer
links					= sink
format					= flf
path					= $(flf-archive)


[*.network.sink]
type					= sink
warn-on-empty-lattice			= true
error-on-empty-lattice			= false
